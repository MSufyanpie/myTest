Answer sheet

AnnswerNO:1

Output of the code:4

fist the i will be 0 then after incrementing it will be 1and square of 1 is 1 so 1 then after 
incrementing it will be 2 and square of 2 is 4 and i will contain 4 then it will  increment 4 to 5 but the 
condition will become false so loop will be terminated and output will be 4



AnswerNo:2
output of the code:
First 
Third 
Second

the "third" will be printed before "second" because of setTimeout function although there is delay of only 0 
but in backend the timeOut func will go into the web api part then it will go into call stack and event loop will
transfer it to task queuenand then it will be executed. during that time the remaining statements will run.

Answer no:3
output:
1
0
First console is printing 1 because it is in the block scope off let count=1
and second console is showing ouput 0 because that console.log is out of the block scope of let.  

Answerno:4
0 10        0 0 
1 10        1 1
2 10        2 2
3 10        3 3
4 10        4 4
5 10        5 5 
6 10        6 6
7 10        7 7
8 10        8 8
9 10        9 9

Answerno:5

Hoisting: It is a by default behaviour of Javascript which transfer declarations of the variables and function 
above its scope.where it is used or executed. but for the let and const it doesnt transfer the declaration to above. 
It will go in to temporal dead zone and gives a reference error.
e.g console.log (name)      e.g no: 2  console.log(name)
    var name="sufyan"                  let name="sufyan"  
    output: sufyan                     output: error  and (same goes in the case of const)



Answerno:6



difference between == and ===: 
== is used to compare the values between the variables on left and right side.
=== is used to compare values and datatype of both variables. 
e.g var a=0,var b="0"
    if (a==0){
   console.log("true")
          } 
  
output: it will show true because it is comparing just values in both variables which is 0 in both 
but if we try if(a===b){
              console.log("true")
                        }
 output: it will show nothing because === is comparing values and 
dataype also of both variables and a have dataype number
and b is string so thats i will not show true.